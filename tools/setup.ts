import { writeFile } from "node:fs/promises";
import { join } from "node:path";
import { confirm, input, select } from "@inquirer/prompts";
import chalk from "chalk";
import { version } from "@/package.json";

const TWITCH_SCOPES = [
  "user:edit",
  "user:read:email",
  "chat:read",
  "chat:edit",
  "channel:moderate",
  "moderation:read",
  "moderator:manage:shoutouts",
  "moderator:manage:announcements",
  "channel:manage:moderators",
  "channel:manage:broadcast",
  "channel:read:vips",
  "channel:read:subscriptions",
  "channel:manage:vips",
  "channel:read:redemptions",
  "channel:manage:redemptions",
  "moderator:read:followers",
  "bits:read",
] as const;

interface ConfigTokens {
  accessToken: string;
  refreshToken: string;
}

interface UserInfo {
  userID: string;
  login?: string;
}

async function openBrowser(url: string): Promise<void> {
  Bun.spawn(["cmd", "/c", "start", "", url]);
}

async function fetchTokens(cliPath: string): Promise<ConfigTokens> {
  const { stderr } = Bun.spawnSync([
    cliPath,
    "token",
    "-u",
    "-s",
    TWITCH_SCOPES.join(" "),
  ]);

  const accessMatch = stderr.toString().match(/User Access Token:\s*(\S+)/);
  const refreshMatch = stderr.toString().match(/Refresh Token:\s*(\S+)/);

  if (!accessMatch || !refreshMatch) {
    throw new Error("Missing tokens from Twitch CLI output");
  }

  return { accessToken: accessMatch[1], refreshToken: refreshMatch[1] };
}

async function fetchUserInfo(
  cliPath: string,
  accessToken: string,
): Promise<UserInfo> {
  const { stdout } = Bun.spawnSync([cliPath, "token", "-v", accessToken]);
  const idMatch = stdout.toString().match(/User ID:\s*(\d+)/);
  const loginMatch = stdout.toString().match(/Login:\s*(\S+)/);

  if (!idMatch) {
    throw new Error("Failed to parse User ID");
  }

  return { userID: idMatch[1], login: loginMatch?.[1] };
}

async function promptLogin(promptMsg: string): Promise<void> {
  const confirmed = await confirm({ message: promptMsg });
  if (!confirmed) {
    console.log(chalk.bold.red("Login required. Exiting."));
    process.exit(1);
  }
}

async function startConfig(): Promise<void> {
  console.log(
    chalk.bold.underline.magenta(`‚ü¶‚óÑ ManaoBot v${version} - Configuration ‚ñ∫‚üß`),
  );

  const lang = {
    en: {
      beforeStart:
        "üõ† Before we start, you need to create a Twitch Application.",
      goTo: "Go to: ",
      createAppInfo1: "Click 'Register Your Application'",
      createAppInfo2: "When creating the app, set the OAuth Redirect URL to: ",
      createAppInfo3:
        "You can leave the category as 'Application Integration' or anything.",
      createAppInfo4: "Set client type to 'Confedential'",
      createAppInfo5:
        "The application name doesn't matter ‚Äî name it anything you want.",
      openBrowser: "Open browser to continue?",
      confirmCreateApp:
        "Press 'Enter' once you have created the app and have your Client ID and Client Secret ready.",
      enterClientID: "Enter your Twitch Application Client ID:",
      enterClientSecret: "Enter your Twitch Application Client Secret:",
      promptLogin:
        "To continue, please login to your BROADCASTER Twitch account (the primary account for streaming).",
      promptLoginBot:
        "To continue, please login to your BOT Twitch account (the secondary account for the bot).",
      useDiscord: "Would you like to enable Discord integration? (Y/n):",
      enterToken: "Enter your Discord Bot Token:",
      configComplete: "‚úÖ Configuration complete! .env file created.",
    },
    th: {
      beforeStart: "üõ† ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏° ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Twitch Application",
      goTo: "‡πÑ‡∏õ‡∏ó‡∏µ‡πà: ",
      createAppInfo1: "‡∏Ñ‡∏•‡∏¥‡∏Å '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏≠‡∏û‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡πà‡∏ô'",
      createAppInfo2: "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ OAuth Redirect URL ‡πÄ‡∏õ‡πá‡∏ô: ",
      createAppInfo3:
        "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏õ‡πá‡∏ô 'Application Integration' ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ",
      createAppInfo4: "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏Ñ‡∏•‡πÄ‡∏≠‡∏ô‡∏ï‡πå‡πÄ‡∏õ‡πá‡∏ô '‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö'",
      createAppInfo5: "‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‚Äî ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£",
      openBrowser: "‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠?",
      confirmCreateApp:
        "‡∏Å‡∏î 'Enter' ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏∏‡∏ì‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ‡πÅ‡∏•‡∏∞‡∏°‡∏µ Client ID (ID ‡πÑ‡∏Ñ‡∏•‡πÅ‡∏≠‡∏ô‡∏ï‡πå) ‡πÅ‡∏•‡∏∞ Client Secret (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö‡∏ö‡∏ô‡πÑ‡∏Ñ‡∏•‡πÄ‡∏≠‡∏ô‡∏ó‡πå) ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß",
      enterClientID: "‡πÉ‡∏™‡πà Client ID ‡∏Ç‡∏≠‡∏á Twitch Application ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:",
      enterClientSecret: "‡πÉ‡∏™‡πà Client Secret ‡∏Ç‡∏≠‡∏á Twitch Application ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:",
      promptLogin:
        "‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠ ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Twitch ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏ï‡∏£‡∏µ‡∏° (‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏ï‡∏£‡∏µ‡∏°)",
      promptLoginBot:
        "‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠ ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ö‡∏≠‡∏ï Twitch ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏≠‡∏ï)",
      useDiscord: "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏≠‡∏ï Discord ‡∏î‡πâ‡∏ß‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (Y/n):",
      enterToken: "‡πÉ‡∏™‡πà‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ï:",
      configComplete: "‚úÖ ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô! ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå .env ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
    },
  };

  let currentlang = "en";

  let cliPath = join(__dirname, "resources", "twitch-cli", "twitch.exe");
  if (!(await Bun.file(cliPath).exists())) cliPath = "twitch.exe"; // Assuming the installer does its job

  // ask language (en/th)
  const langChoice = await select({
    message: "Choose setup language:",
    choices: ["English", "‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"],
  });

  if (langChoice === "English") currentlang = "en";
  if (langChoice === "‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢") currentlang = "th";

  console.log(
    chalk.yellowBright(lang[currentlang as keyof typeof lang].beforeStart),
  );
  console.log(
    lang[currentlang as keyof typeof lang].goTo +
      chalk.blueBright("https://dev.twitch.tv/console/apps"),
  );
  console.log(
    chalk.gray(`‚Üí ${lang[currentlang as keyof typeof lang].createAppInfo1}`),
  );
  console.log(
    chalk.gray(`‚Üí ${lang[currentlang as keyof typeof lang].createAppInfo2}`),
    chalk.bold("http://localhost:3000"),
  );
  console.log(
    chalk.gray(`‚Üí ${lang[currentlang as keyof typeof lang].createAppInfo3}`),
  );
  console.log(
    chalk.gray(`‚Üí ${lang[currentlang as keyof typeof lang].createAppInfo4}`),
  );
  console.log(
    chalk.gray(`‚Üí ${lang[currentlang as keyof typeof lang].createAppInfo5}`),
  );

  const result = await confirm({
    message: `${lang[currentlang as keyof typeof lang].openBrowser}`,
  });

  if (result) await openBrowser("https://dev.twitch.tv/console/apps");

  await confirm({
    message: `${lang[currentlang as keyof typeof lang].confirmCreateApp}`,
  });

  // Ask for Client ID and Secret
  const clientID = await input({
    message: lang[currentlang as keyof typeof lang].enterClientID,
  });
  const clientSecret = await input({
    message: lang[currentlang as keyof typeof lang].enterClientSecret,
  });

  // Configure Twitch CLI
  Bun.spawnSync([cliPath, "configure", "-i", clientID, "-s", clientSecret]);

  // Bot account
  await promptLogin(
    `\n${lang[currentlang as keyof typeof lang].promptLoginBot}`,
  );
  const botTokens = await fetchTokens(cliPath);
  const botInfo = await fetchUserInfo(cliPath, botTokens.accessToken);

  // Broadcaster account
  await promptLogin(`\n${lang[currentlang as keyof typeof lang].promptLogin}`);
  const bcTokens = await fetchTokens(cliPath);
  const bcInfo = await fetchUserInfo(cliPath, bcTokens.accessToken);

  const useDiscord = await confirm({
    message: `${lang[currentlang as keyof typeof lang].useDiscord}`,
  });

  const token = useDiscord
    ? await input({
        message: lang[currentlang as keyof typeof lang].enterToken,
      })
    : "";

  // Create .env content
  const envContent = `

# ========================
#       TWITCH BOT
# ========================

USE_TWITCH=true

TWITCH_BOT_ACCESS_TOKEN=${botTokens.accessToken}
TWITCH_BOT_REFRESH_TOKEN=${botTokens.refreshToken}

BROADCASTER_ACCESS_TOKEN=${bcTokens.accessToken}
BROADCASTER_REFRESH_TOKEN=${bcTokens.refreshToken}

TWITCH_BOT_ID=${botInfo.userID}
BROADCASTER_CHANNEL=${bcInfo.login ?? ""}
BROADCASTER_ID=${bcInfo.userID}

TWITCH_CLIENT_ID=${clientID}
TWITCH_CLIENT_SECRET=${clientSecret}

# ========================
#       DISCORD BOT
# ========================

USE_DISCORD=${useDiscord ? "true" : "false"}
DISCORD_BOT_TOKEN=${token}
SERVER_ID=

NODE_ENV=
`.trim();

  await writeFile(join(process.cwd(), ".env"), envContent, "utf8");

  console.log(
    chalk.green(`\n${lang[currentlang as keyof typeof lang].configComplete}`),
  );
}

async function run() {
  try {
    await startConfig();
    process.exit(0);
  } catch (err: any) {
    console.error(chalk.bold.red("Configuration failed:"), err.message);
    process.exit(1);
  }
}

await run();
